/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jremoteserver;

import java.awt.AWTException;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.MouseInfo;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author om4rezz
 */
public class ServerFrame extends javax.swing.JFrame {

    Thread threadServerScreen;
    Thread threadServerMessages;
    Socket socketScreens;
    Socket socketMessages;
    ServerSocket serverSocketScreens;
    ServerSocket serverSocketMessages;

    // Char to determine either sent msg or image
    // Character sendingGuide;
    String sentMsg = " ";

    DefaultListModel<String> connectedClientsModel;

    /**
     * Creates new form ServerFrame
     */
    public ServerFrame() {
        initComponents();
        setLocationRelativeTo(null);
        initUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtgbtnStartListen = new javax.swing.JToggleButton();
        jbtShareFile = new javax.swing.JButton();
        jbtNotifySomeone = new javax.swing.JButton();
        jbtPublicNotification = new javax.swing.JButton();
        jbtExit = new javax.swing.JButton();
        jlblStatus = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlstConnectedClients = new javax.swing.JList();
        jlblMessages = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Server");
        setAlwaysOnTop(true);

        jtgbtnStartListen.setText("Start Listening");

        jbtShareFile.setText("Share File");

        jbtNotifySomeone.setText("Notify someone");

        jbtPublicNotification.setText("Public Notification");

        jbtExit.setText("Exit");

        jlblStatus.setText("Status:");

        jScrollPane1.setViewportView(jlstConnectedClients);

        jlblMessages.setText("Messages: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlblStatus)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlblMessages)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jbtExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtPublicNotification, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtNotifySomeone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jtgbtnStartListen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtShareFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jlblMessages)))
                        .addGap(18, 18, 18)
                        .addComponent(jlblStatus))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jtgbtnStartListen, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbtNotifySomeone, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbtPublicNotification, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbtShareFile, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbtExit, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtExit;
    private javax.swing.JButton jbtNotifySomeone;
    private javax.swing.JButton jbtPublicNotification;
    private javax.swing.JButton jbtShareFile;
    private javax.swing.JLabel jlblMessages;
    private javax.swing.JLabel jlblStatus;
    private javax.swing.JList jlstConnectedClients;
    private javax.swing.JToggleButton jtgbtnStartListen;
    // End of variables declaration//GEN-END:variables

    private void initUI() {

        // sendingGuide = '1';
        connectedClientsModel = new DefaultListModel<String>();

        jlstConnectedClients.setModel(connectedClientsModel);

        jbtPublicNotification.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {

                String msg = JOptionPane.showInputDialog("Provide a message:");

                sentMsg = "PUPLIC_MESSAGE & " + msg;

                try {
                    DataOutputStream dos = new DataOutputStream(
                            socketMessages.getOutputStream());
                    if (!(sentMsg.equals(" "))) {
                        dos.writeUTF(sentMsg);
                        // sentMsg = " ";
                        dos.close();
                        socketMessages.close();
                    }
                } catch (IOException ex) {
                    Logger.getLogger(ServerFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });

        jtgbtnStartListen.addActionListener(new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (jtgbtnStartListen.isSelected()) {
                    jtgbtnStartListen.setText("Pause");

                    threadServerMessages = new Thread(new Runnable() {

                        @Override
                        public void run() {
                            try {

                                serverSocketMessages = new ServerSocket(8002);
                                jlblMessages.setText("Status: Running.......");
                                while (true) {
                                    socketMessages = serverSocketMessages.accept();

                                    jlblMessages.setText("Status: Accept");

                                    jlblMessages.setText("Status: Sending message.....");

                                }
                            } catch (IOException ex) {
                                Logger.getLogger(ServerFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    });

                    threadServerScreen = new Thread(new Runnable() {

                        @Override
                        public void run() {

                            try {
                                serverSocketScreens = new ServerSocket(8001);
                                jlblStatus.setText("Status: Running.......");

                                while (true) {
                                    socketScreens = serverSocketScreens.accept();

                                    /**
                                     * LIST the CONNECTED Client
                                     */
                                    // prevent multible adding
                                    if (!connectedClientsModel.contains(
                                            socketScreens.getInetAddress().getCanonicalHostName())) {
                                        connectedClientsModel.addElement(
                                                socketScreens.getInetAddress().getCanonicalHostName());
                                    }

                                    jlblStatus.setText("Status: Accept");
                                    DataInputStream dis = new DataInputStream(socketScreens.getInputStream());

                                    jlblStatus.setText(dis.readUTF());

                                    Robot robot = null;
                                    try {
                                        robot = new Robot();
                                    } catch (AWTException e) {
                                        jlblStatus.setText(e.getMessage());
                                    }
                                    BufferedImage screenCapture = robot.createScreenCapture(new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()));
                                    // ImageIO.write(screenShot, "JPG", new File("2.jpg"));

                                    Image cursor = ImageIO.read(new File("pointer.png"));
                                    int x = MouseInfo.getPointerInfo().getLocation().x;
                                    int y = MouseInfo.getPointerInfo().getLocation().y;
                                    Graphics2D graphics2D = screenCapture.createGraphics();
                                    graphics2D.drawImage(cursor, x, y, 35, 35, null); // cursor.gif is 16x16 size.
                                    ImageIO.write(screenCapture, "GIF", new File("2.jpg"));
                                    jlblStatus.setText("Status: Capturing.....");

                                    FileInputStream fis = new FileInputStream("2.jpg");
                                    byte[] buffer = new byte[fis.available()];

                                    fis.read(buffer);

                                    ObjectOutputStream oos = new ObjectOutputStream(
                                            socketScreens.getOutputStream());

                                    oos.writeObject(buffer);
                                    jlblStatus.setText("Status: Sending image.....");

                                    oos.close();
                                    socketScreens.close();
                                }

                            } catch (IOException e) {
                                // TODO Auto-generated catch block
                                jlblStatus.setText(e.getMessage());
                            }

                        }
                    });

                    threadServerScreen.start();
                    threadServerMessages.start();
                } else /* close the server */ {
                    jtgbtnStartListen.setText("Start Listening");
                    try {
                        // NOT to cause Null pointer exception
                        if (socketScreens != null) {
                            socketScreens.close();
                        }
                        if (socketMessages != null) {
                            socketMessages.close();
                        }
                        serverSocketScreens.close();
                        serverSocketMessages.close();

                    } catch (IOException ex) {
                        jlblStatus.setText(ex.getMessage());
                        jlblMessages.setText(ex.getMessage());
                    }
                    threadServerScreen = null;
                    threadServerMessages = null;
                    System.out.println("Closed");
                }
            }
        });

        jbtExit.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });
    }
}
